// <auto-generated />
using System;
using DatabaseMigrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseMigrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeFirst.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CategoryId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CategoryName");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Discription");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("Picture");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CustomerId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Address1");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Address2");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Building");

                    b.Property<string>("BuildingAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BuildingAddress");

                    b.Property<string>("BuildingCity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BuildingCity");

                    b.Property<string>("BuildingCountry")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BuildingCountry");

                    b.Property<int>("BuildingPostalCode")
                        .HasColumnType("integer")
                        .HasColumnName("BuildingPostalCode");

                    b.Property<string>("BuildingRegion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Buildingregion");

                    b.Property<string>("CardExpMo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CardExpMo");

                    b.Property<string>("CardExpYr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CardExpYr");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("City");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Class");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Country");

                    b.Property<string>("CreditCard")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CreditCard");

                    b.Property<int>("CreditCardTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("CreditCardTypeId");

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateEntered");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer")
                        .HasColumnName("PostalCode");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Room");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ShipAddress");

                    b.Property<string>("ShipCity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ShipCity");

                    b.Property<string>("ShipCountry")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ShipCountry");

                    b.Property<int>("ShipPostalCode")
                        .HasColumnType("integer")
                        .HasColumnName("ShipPostalCode");

                    b.Property<string>("ShipRegion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ShipRegion");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("State");

                    b.Property<string>("VoiseMail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("VoiseMail");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Entities.OrderDetailEntity", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OrderDetailId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailId"));

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BillDate");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Color");

                    b.Property<float>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("Discount");

                    b.Property<bool>("Fulfilled")
                        .HasColumnType("boolean")
                        .HasColumnName("Fulfilled");

                    b.Property<int>("IdSKU")
                        .HasColumnType("integer")
                        .HasColumnName("IdSKU");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("OrderId");

                    b.Property<int>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OrderNumber");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderNumber"));

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("Price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    b.Property<string>("Quantify")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Quantity");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ShipDate");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("Size");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("Total");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Entities.OrderEntity", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OrderId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("CustomerId");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Deleted");

                    b.Property<string>("ErrLoc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ErrLoc");

                    b.Property<string>("ErrMag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ReeMag");

                    b.Property<string>("Freight")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Freight");

                    b.Property<bool>("Fulfilled")
                        .HasColumnType("boolean")
                        .HasColumnName("FullFilling");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OrderDate");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("OrderNumber");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean")
                        .HasColumnName("Paid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("PaymentDate");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("PaymentId");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RequiredDate");

                    b.Property<string>("SalesTax")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SalesTax");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ShipData");

                    b.Property<int>("ShipperId")
                        .HasColumnType("integer")
                        .HasColumnName("ShipperId");

                    b.Property<string>("TimeStamp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TimeStamp");

                    b.Property<string>("TransactStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Transact");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShipperId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Entities.PaymentEntity", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PaymentId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<bool>("Allowed")
                        .HasColumnType("boolean")
                        .HasColumnName("Allowed");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PaymentType");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Entities.ProductEntity", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProductId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("AvailableColors")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("availableColors");

                    b.Property<string>("AvailableSize")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AvailableSize");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Color");

                    b.Property<int>("CurrentOrder")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentOrder");

                    b.Property<float>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("Discount");

                    b.Property<bool>("DiscountAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("DiscountAvailable");

                    b.Property<int>("IdSKU")
                        .HasColumnType("integer")
                        .HasColumnName("IdSKU");

                    b.Property<string>("MSRP")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MSRP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Note");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("Picture");

                    b.Property<bool>("ProductAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("ProductAvailable");

                    b.Property<string>("ProductDiscription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ProductDiscription");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ProductName");

                    b.Property<int>("QuantityPerUnit")
                        .HasColumnType("integer")
                        .HasColumnName("QuantityPerUnit");

                    b.Property<int>("Ranking")
                        .HasColumnType("integer")
                        .HasColumnName("Ranking");

                    b.Property<string>("ReorderLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ReorderLevel");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SKU");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Size");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("SupplierId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("UnitPrice");

                    b.Property<float>("UnitWeight")
                        .HasColumnType("real")
                        .HasColumnName("UnitWeight");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("integer")
                        .HasColumnName("UnitsInStock");

                    b.Property<int>("UnitsOnOrders")
                        .HasColumnType("integer");

                    b.Property<int>("VeridorProductsId")
                        .HasColumnType("integer")
                        .HasColumnName("VeridorProduct");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Entities.ShipperEntity", b =>
                {
                    b.Property<int>("ShipperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ShipperId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipperId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.HasKey("ShipperId");

                    b.ToTable("Shippers", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Entities.SupplierEntity", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplierId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Address1");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Address2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("City");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CompanyName");

                    b.Property<string>("ContactFName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ContactFName");

                    b.Property<string>("ContactLName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ContactLName");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ContactTitle");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Country");

                    b.Property<string>("CurrentOrder")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CurrentOrder");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("CustomerId");

                    b.Property<bool>("DiscountAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("DiscountAvailable");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DiscountType");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Fax");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Logo");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Notes");

                    b.Property<string>("PaymentMethods")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PaymentMethods");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer")
                        .HasColumnName("PostalCode");

                    b.Property<int>("SizeURL")
                        .HasColumnType("integer")
                        .HasColumnName("SizeURL");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("State");

                    b.Property<string>("TypeGoods")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TypeGoods");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("URl");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Entities.OrderDetailEntity", b =>
                {
                    b.HasOne("CodeFirst.Entities.OrderEntity", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFirst.Entities.ProductEntity", "Product")
                        .WithMany("Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CodeFirst.Entities.OrderEntity", b =>
                {
                    b.HasOne("CodeFirst.Entities.CustomerEntity", "Customer")
                        .WithMany("OrderList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFirst.Entities.PaymentEntity", "Pay")
                        .WithMany("OrderList")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFirst.Entities.ShipperEntity", "Shipper")
                        .WithMany("OrderList")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Pay");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("CodeFirst.Entities.ProductEntity", b =>
                {
                    b.HasOne("CodeFirst.Entities.CategoryEntity", "Category")
                        .WithMany("ProductsList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFirst.Entities.SupplierEntity", "Supplier")
                        .WithMany("ProductList")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CodeFirst.Entities.CategoryEntity", b =>
                {
                    b.Navigation("ProductsList");
                });

            modelBuilder.Entity("CodeFirst.Entities.CustomerEntity", b =>
                {
                    b.Navigation("OrderList");
                });

            modelBuilder.Entity("CodeFirst.Entities.OrderEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("CodeFirst.Entities.PaymentEntity", b =>
                {
                    b.Navigation("OrderList");
                });

            modelBuilder.Entity("CodeFirst.Entities.ProductEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("CodeFirst.Entities.ShipperEntity", b =>
                {
                    b.Navigation("OrderList");
                });

            modelBuilder.Entity("CodeFirst.Entities.SupplierEntity", b =>
                {
                    b.Navigation("ProductList");
                });
#pragma warning restore 612, 618
        }
    }
}
